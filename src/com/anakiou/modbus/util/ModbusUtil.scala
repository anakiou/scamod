package com.anakiou.modbus.util

import com.anakiou.modbus.Modbus
import com.anakiou.modbus.io.BytesOutputStream
import com.anakiou.modbus.msg.ModbusMessage
import java.io.IOException

object ModbusUtil {

  private var m_ByteOut: BytesOutputStream = new BytesOutputStream(Modbus.MAX_IP_MESSAGE_LENGTH)

  def toHex(msg: ModbusMessage): String = {
    var ret = "-1"
    try {
      synchronized {
        msg.writeTo(m_ByteOut)
        ret = toHex(m_ByteOut.getBuffer, 0, m_ByteOut.size)
        m_ByteOut.reset()
      }
    } catch {
      case ex: IOException => 
    }
    ret
  }

  def toHex(data: Array[Byte]): String = toHex(data, 0, data.length)

  def toHex(data: Array[Byte], off: Int, length: Int): String = {
    val buf = new StringBuffer(data.length * 2)
    for (i <- off until length) {
      if ((data(i).toInt & 0xff) < 0x10) {
        buf.append("0")
      }
      buf.append(java.lang.Long.toString(data(i).toInt & 0xff, 16))
      if (i < data.length - 1) {
        buf.append(" ")
      }
    }
    buf.toString
  }

  def toHex(i: Int): Array[Byte] = {
    val buf = new StringBuffer(2)
    if ((i.toInt & 0xff) < 0x10) {
      buf.append("0")
    }
    buf.append(java.lang.Long.toString(i.toInt & 0xff, 16).toUpperCase())
    buf.toString.getBytes
  }

  def registerToUnsignedShort(bytes: Array[Byte]): Int = {
    ((bytes(0) & 0xff) << 8 | (bytes(1) & 0xff))
  }

  def unsignedShortToRegister(v: Int): Array[Byte] = {
    val register = Array.ofDim[Byte](2)
    register(0) = (0xff & (v >> 8)).toByte
    register(1) = (0xff & v).toByte
    register
  }

  def registerToShort(bytes: Array[Byte]): Short = {
    ((bytes(0) << 8) | (bytes(1) & 0xff)).toShort
  }

  def registerToShort(bytes: Array[Byte], idx: Int): Short = {
    ((bytes(idx) << 8) | (bytes(idx + 1) & 0xff)).toShort
  }

  def shortToRegister(s: Short): Array[Byte] = {
    val register = Array.ofDim[Byte](2)
    register(0) = (0xff & (s >> 8)).toByte
    register(1) = (0xff & s).toByte
    register
  }

  def registersToInt(bytes: Array[Byte]): Int = {
    (((bytes(0) & 0xff) << 24) | ((bytes(1) & 0xff) << 16) | 
      ((bytes(2) & 0xff) << 8) | 
      (bytes(3) & 0xff))
  }

  def intToRegisters(v: Int): Array[Byte] = {
    val registers = Array.ofDim[Byte](4)
    registers(0) = (0xff & (v >> 24)).toByte
    registers(1) = (0xff & (v >> 16)).toByte
    registers(2) = (0xff & (v >> 8)).toByte
    registers(3) = (0xff & v).toByte
    registers
  }

  def registersToLong(bytes: Array[Byte]): Long = {
    ((((bytes(0) & 0xff).toLong << 56) | ((bytes(1) & 0xff).toLong << 48) | 
      ((bytes(2) & 0xff).toLong << 40) | 
      ((bytes(3) & 0xff).toLong << 32) | 
      ((bytes(4) & 0xff).toLong << 24) | 
      ((bytes(5) & 0xff).toLong << 16) | 
      ((bytes(6) & 0xff).toLong << 8) | 
      (bytes(7) & 0xff).toLong))
  }

  def longToRegisters(v: Long): Array[Byte] = {
    val registers = Array.ofDim[Byte](8)
    registers(0) = (0xff & (v >> 56)).toByte
    registers(1) = (0xff & (v >> 48)).toByte
    registers(2) = (0xff & (v >> 40)).toByte
    registers(3) = (0xff & (v >> 32)).toByte
    registers(4) = (0xff & (v >> 24)).toByte
    registers(5) = (0xff & (v >> 16)).toByte
    registers(6) = (0xff & (v >> 8)).toByte
    registers(7) = (0xff & v).toByte
    registers
  }

  def registersToFloat(bytes: Array[Byte]): Float = {
    java.lang.Float.intBitsToFloat((((bytes(0) & 0xff) << 24) | ((bytes(1) & 0xff) << 16) | 
      ((bytes(2) & 0xff) << 8) | 
      (bytes(3) & 0xff)))
  }

  def floatToRegisters(f: Float): Array[Byte] = {
    intToRegisters(java.lang.Float.floatToIntBits(f))
  }

  def registersToDouble(bytes: Array[Byte]): Double = {
    java.lang.Double.longBitsToDouble(((((bytes(0) & 0xff).toLong << 56) | ((bytes(1) & 0xff).toLong << 48) | 
      ((bytes(2) & 0xff).toLong << 40) | 
      ((bytes(3) & 0xff).toLong << 32) | 
      ((bytes(4) & 0xff).toLong << 24) | 
      ((bytes(5) & 0xff).toLong << 16) | 
      ((bytes(6) & 0xff).toLong << 8) | 
      (bytes(7) & 0xff).toLong)))
  }

  def doubleToRegisters(d: Double): Array[Byte] = {
    longToRegisters(java.lang.Double.doubleToLongBits(d))
  }

  def unsignedByteToInt(b: Byte): Int = b.toInt & 0xFF

  def lowByte(wd: Int): Byte = {
    (new java.lang.Integer(0xff & wd).byteValue())
  }

  def hiByte(wd: Int): Byte = {
    (new java.lang.Integer(0xff & (wd >> 8)).byteValue())
  }

  def makeWord(hibyte: Int, lowbyte: Int): Int = {
    val hi = 0xFF & hibyte
    val low = 0xFF & lowbyte
    ((hi << 8) | low)
  }

  def calculateCRC(data: Array[Byte], offset: Int, len: Int): Array[Int] = {
    val crc = Array(0xFF, 0xFF)
    var nextByte = 0
    var uIndex: Int = 0
    var i = offset
    while (i < len && i < data.length) {
      nextByte = 0xFF & data(i).toInt
      uIndex = crc(0) ^ nextByte
      crc(0) = crc(1) ^ auchCRCHi(uIndex)
      crc(1) = auchCRCLo(uIndex)
      i += 1
    }
    crc
  }

  def calculateLRC(data: Array[Byte], off: Int, len: Int): Int = {
    var lrc = 0
    for (i <- off until len) {
      lrc += data(i).toInt & 0xff
    }
    lrc = (lrc ^ 0xff) + 1
    lrc.toByte.toInt & 0xff
  }

  private val auchCRCHi = Array(0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40)

  private val auchCRCLo = Array(0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40)
}
